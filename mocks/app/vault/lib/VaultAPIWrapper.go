// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/vault/api"

	mock "github.com/stretchr/testify/mock"
)

// VaultAPIWrapper is an autogenerated mock type for the VaultAPIWrapper type
type VaultAPIWrapper struct {
	mock.Mock
}

// GetPlugin provides a mock function with given fields: input
func (_m *VaultAPIWrapper) GetPlugin(input *api.GetPluginInput) (*api.GetPluginResponse, error) {
	ret := _m.Called(input)

	var r0 *api.GetPluginResponse
	if rf, ok := ret.Get(0).(func(*api.GetPluginInput) *api.GetPluginResponse); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetPluginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.GetPluginInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMounts provides a mock function with given fields:
func (_m *VaultAPIWrapper) ListMounts() (map[string]*api.MountOutput, error) {
	ret := _m.Called()

	var r0 map[string]*api.MountOutput
	if rf, ok := ret.Get(0).(func() map[string]*api.MountOutput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*api.MountOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mount provides a mock function with given fields: path, input
func (_m *VaultAPIWrapper) Mount(path string, input *api.MountInput) error {
	ret := _m.Called(path, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.MountInput) error); ok {
		r0 = rf(path, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: path
func (_m *VaultAPIWrapper) Read(path string) (map[string]interface{}, error) {
	ret := _m.Called(path)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPlugin provides a mock function with given fields: input
func (_m *VaultAPIWrapper) RegisterPlugin(input *api.RegisterPluginInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.RegisterPluginInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReloadPlugin provides a mock function with given fields: input
func (_m *VaultAPIWrapper) ReloadPlugin(input *api.ReloadPluginInput) (string, error) {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(*api.ReloadPluginInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.ReloadPluginInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAddress provides a mock function with given fields: address
func (_m *VaultAPIWrapper) SetAddress(address string) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *VaultAPIWrapper) SetToken(token string) {
	_m.Called(token)
}

// Write provides a mock function with given fields: path, data
func (_m *VaultAPIWrapper) Write(path string, data map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(path, data)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
