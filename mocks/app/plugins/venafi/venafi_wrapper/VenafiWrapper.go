// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	certificate "github.com/Venafi/vcert/v4/pkg/certificate"
	endpoint "github.com/Venafi/vcert/v4/pkg/endpoint"

	mock "github.com/stretchr/testify/mock"

	tpp "github.com/Venafi/vcert/v4/pkg/venafi/tpp"
)

// VenafiWrapper is an autogenerated mock type for the VenafiWrapper type
type VenafiWrapper struct {
	mock.Mock
}

// GenerateRequest provides a mock function with given fields: config, req, zone
func (_m *VenafiWrapper) GenerateRequest(config *endpoint.ZoneConfiguration, req *certificate.Request, zone string) error {
	ret := _m.Called(config, req, zone)

	var r0 error
	if rf, ok := ret.Get(0).(func(*endpoint.ZoneConfiguration, *certificate.Request, string) error); ok {
		r0 = rf(config, req, zone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRefreshToken provides a mock function with given fields: auth
func (_m *VenafiWrapper) GetRefreshToken(auth *endpoint.Authentication) (tpp.OauthGetRefreshTokenResponse, error) {
	ret := _m.Called(auth)

	var r0 tpp.OauthGetRefreshTokenResponse
	if rf, ok := ret.Get(0).(func(*endpoint.Authentication) tpp.OauthGetRefreshTokenResponse); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Get(0).(tpp.OauthGetRefreshTokenResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*endpoint.Authentication) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestCertificate provides a mock function with given fields: req, zone
func (_m *VenafiWrapper) RequestCertificate(req *certificate.Request, zone string) (string, error) {
	ret := _m.Called(req, zone)

	var r0 string
	if rf, ok := ret.Get(0).(func(*certificate.Request, string) string); ok {
		r0 = rf(req, zone)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*certificate.Request, string) error); ok {
		r1 = rf(req, zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCertificate provides a mock function with given fields: req, zone
func (_m *VenafiWrapper) RetrieveCertificate(req *certificate.Request, zone string) (*certificate.PEMCollection, error) {
	ret := _m.Called(req, zone)

	var r0 *certificate.PEMCollection
	if rf, ok := ret.Get(0).(func(*certificate.Request, string) *certificate.PEMCollection); ok {
		r0 = rf(req, zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificate.PEMCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*certificate.Request, string) error); ok {
		r1 = rf(req, zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
