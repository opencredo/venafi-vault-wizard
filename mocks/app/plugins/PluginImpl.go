// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	api "github.com/opencredo/venafi-vault-wizard/app/vault/api"
	mock "github.com/stretchr/testify/mock"

	reporter "github.com/opencredo/venafi-vault-wizard/app/reporter"
)

// PluginImpl is an autogenerated mock type for the PluginImpl type
type PluginImpl struct {
	mock.Mock
}

// Check provides a mock function with given fields: report, vaultClient
func (_m *PluginImpl) Check(report reporter.Report, vaultClient api.VaultAPIClient) error {
	ret := _m.Called(report, vaultClient)

	var r0 error
	if rf, ok := ret.Get(0).(func(reporter.Report, api.VaultAPIClient) error); ok {
		r0 = rf(report, vaultClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Configure provides a mock function with given fields: report, vaultClient
func (_m *PluginImpl) Configure(report reporter.Report, vaultClient api.VaultAPIClient) error {
	ret := _m.Called(report, vaultClient)

	var r0 error
	if rf, ok := ret.Get(0).(func(reporter.Report, api.VaultAPIClient) error); ok {
		r0 = rf(report, vaultClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDownloadURL provides a mock function with given fields:
func (_m *PluginImpl) GetDownloadURL() (string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateConfig provides a mock function with given fields:
func (_m *PluginImpl) ValidateConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
