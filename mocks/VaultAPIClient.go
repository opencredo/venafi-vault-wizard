// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/vault/api"
	mock "github.com/stretchr/testify/mock"
)

// VaultAPIClient is an autogenerated mock type for the VaultAPIClient type
type VaultAPIClient struct {
	mock.Mock
}

// Mount provides a mock function with given fields: path, input
func (_m *VaultAPIClient) Mount(path string, input *api.MountInput) error {
	ret := _m.Called(path, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.MountInput) error); ok {
		r0 = rf(path, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: path
func (_m *VaultAPIClient) Read(path string) (map[string]interface{}, error) {
	ret := _m.Called(path)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPlugin provides a mock function with given fields: input
func (_m *VaultAPIClient) RegisterPlugin(input *api.RegisterPluginInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.RegisterPluginInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAddress provides a mock function with given fields: address
func (_m *VaultAPIClient) SetAddress(address string) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *VaultAPIClient) SetToken(token string) {
	_m.Called(token)
}

// Write provides a mock function with given fields: path, data
func (_m *VaultAPIClient) Write(path string, data map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(path, data)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
