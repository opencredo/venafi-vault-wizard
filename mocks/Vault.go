// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Vault is an autogenerated mock type for the Vault type
type Vault struct {
	mock.Mock
}

// AddIPCLockCapabilityToFile provides a mock function with given fields: filename
func (_m *Vault) AddIPCLockCapabilityToFile(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Vault) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPluginDir provides a mock function with given fields:
func (_m *Vault) GetPluginDir() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMLockDisabled provides a mock function with given fields:
func (_m *Vault) IsMLockDisabled() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MountPlugin provides a mock function with given fields: name, path
func (_m *Vault) MountPlugin(name string, path string) error {
	ret := _m.Called(name, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadValue provides a mock function with given fields: path
func (_m *Vault) ReadValue(path string) (map[string]interface{}, error) {
	ret := _m.Called(path)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPlugin provides a mock function with given fields: name, command, sha
func (_m *Vault) RegisterPlugin(name string, command string, sha string) error {
	ret := _m.Called(name, command, sha)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(name, command, sha)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteFile provides a mock function with given fields: sourceFile, hostDestination
func (_m *Vault) WriteFile(sourceFile io.Reader, hostDestination string) error {
	ret := _m.Called(sourceFile, hostDestination)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) error); ok {
		r0 = rf(sourceFile, hostDestination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteValue provides a mock function with given fields: path, value
func (_m *Vault) WriteValue(path string, value map[string]interface{}) error {
	ret := _m.Called(path, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(path, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
